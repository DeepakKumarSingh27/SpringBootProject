package com.jsp.studentmanagementsystem.controller;
import java.io.IOException;
import java.rmi.StubNotFoundException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.jsp.studentmanagementsystem.dto.MessageData;
import com.jsp.studentmanagementsystem.dto.StudentRequest;
import com.jsp.studentmanagementsystem.entity.Student;
import com.jsp.studentmanagementsystem.service.StudentService;
import com.jsp.studentmanagementsystem.util.ResponseStructure;

import jakarta.validation.Valid;
@RestController
@RequestMapping("/students")
public class StudentController {
	@Autowired
	private StudentService service;

	// @RequestMapping(method = RequestMethod.POST)
	@PostMapping
	public ResponseEntity<ResponseStructure<StudentRequest>> saveStudent(@RequestBody @Valid StudentRequest studentRequest) {
		return service.saveStudent(studentRequest);
	}
      
	@GetMapping("/student")
	public ResponseEntity<Student> findStudent(@RequestParam int studentId) {
		return service.findStudentbyId(studentId);
	}

	@PutMapping("/student/{studentId}")
	public ResponseEntity<Student> updateStudent(@RequestBody Student student, @PathVariable int studentId) {
		return service.updateStudent(student, studentId);
	}

	@DeleteMapping("/{studentId}")
	public ResponseEntity<Student> deleteStudent(@PathVariable int studentId) throws StubNotFoundException {
		return service.deleteStudent(studentId);
	}
	@GetMapping("/findall")
	public ResponseEntity<ResponseStructure<List<Student>>> GetAllStudent(){
		return service.findAllStudent();
	}
	ResponseEntity<ResponseStructure<List<String>>> getAllEmailsByGrade(String grade){
	return service.getAllEmailsByGrade(grade);	
	}
	@PostMapping("/extract")
	public ResponseEntity<String> ExtractDataFromExcel( @RequestParam  MultipartFile file) throws IOException{
		return service.extractDataFromExcel(file);
	}
	
	@PostMapping("/write/excel")
	public ResponseEntity<String> writeToExcel(@RequestParam String filepath) 
			throws IOException{
	return service.writeToExcel(filepath);	
	}
	@PostMapping("/mail")
	public ResponseEntity<String> sendmail(@RequestBody MessageData messageData){
	  return service.sendmail(messageData);	
	}
	
	@PostMapping("mime-message")
	public ResponseEntity<String> sendMimeMessage(MessageData messageData)
	{
		return service.sendMimeMessage(messageData);
	}
	
	
}
