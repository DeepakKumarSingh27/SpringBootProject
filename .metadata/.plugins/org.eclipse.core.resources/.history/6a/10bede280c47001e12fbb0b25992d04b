package com.jsp.studentmanagementsystem.serviceimpl;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.rmi.StubNotFoundException;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.jsp.studentmanagementsystem.dto.MessageData;
import com.jsp.studentmanagementsystem.dto.StudentRequest;
import com.jsp.studentmanagementsystem.entity.Student;
import com.jsp.studentmanagementsystem.exception.StudentNotFounByIdException;
import com.jsp.studentmanagementsystem.repository.StudentRepo;
import com.jsp.studentmanagementsystem.service.StudentService;
import com.jsp.studentmanagementsystem.util.ResponseStructure;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import jakarta.validation.Valid;

@Service
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepo repo;
	@Autowired
	private JavaMailSender javamailsender;

	@Override
	public ResponseEntity<ResponseStructure<Student>> saveStudent(Student student) {
		Student student2 = repo.save(student);

		ResponseStructure<Student> structure = new ResponseStructure<Student>();
		structure.setStatus(HttpStatus.CREATED.value());
		structure.setMessage("Student data saved successfully");
		structure.setData(student2);

		return new ResponseEntity<ResponseStructure<Student>>(structure, HttpStatus.CREATED);
	}

	@Override
	public ResponseEntity<Student> updateStudent(Student student, int studentId) {
		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {
			Student student2 = optional.get();
			student.setStudentId(student2.getStudentId());
			Student student3 = repo.save(student);
			return new ResponseEntity<Student>(student3, HttpStatus.OK);

		} else {
			return null;
		}

	}

	@Override
	public ResponseEntity<Student> deleteStudent(int studentId) throws StubNotFoundException {

		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {
			Student student3 = optional.get();
			repo.delete(student3);
			return new ResponseEntity<Student>(student3, HttpStatus.OK);

		} else {
			throw new StudentNotFounByIdException("Failed to Delete the student!!");
		}

	}

	@Override
	public ResponseEntity<Student> findStudentbyId(int studentId) {
		Optional<Student> optional = repo.findById(studentId);
		if (optional.isPresent()) {
			Student student = optional.get();
			return new ResponseEntity<Student>(student, HttpStatus.FOUND);
		} else {
			return null;
		}
	}

//	@Override
//	public ResponseEntity<List<Student>> findAllStudent() {
//		// TODO Auto-generated method stub
//		List<Student> list = repo.findAll();
//		return new ResponseEntity<List<Student>>(list,HttpStatus.FOUND) ;
//	}

	@Override
	public ResponseEntity<ResponseStructure<List<Student>>> findAllStudent() {

		ResponseStructure<List<Student>> structure = new ResponseStructure<List<Student>>();
		structure.setStatus(HttpStatus.OK.value());
		structure.setMessage("List of ALl users");
		structure.setData(repo.findAll());

		List<Student> list = repo.findAll();
		return new ResponseEntity<ResponseStructure<List<Student>>>(structure, HttpStatus.OK);
	}

	public ResponseEntity<ResponseStructure<List<String>>> getAllEmailsByGrade(String grade) {
		List<String> emails = repo.getAllEmailsByGrade(grade);
		ResponseStructure<List<String>> structure = new ResponseStructure<List<String>>();
		return new ResponseEntity<ResponseStructure<List<String>>>(structure, HttpStatus.FOUND);
	}

	@Override
	public ResponseEntity<ResponseStructure<StudentRequest>> saveStudent(@Valid StudentRequest studentRequest) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<String> extractDataFromExcel(MultipartFile file) throws IOException {
		XSSFWorkbook workbook = new XSSFWorkbook(file.getInputStream());
		for (Sheet sheet : workbook) 
		{
			for (Row row : sheet) 
			{ 
			 if(row.getRowNum()>0)
			 {    
				 
					String name = row.getCell(0).getStringCellValue();
					String email = row.getCell(1).getStringCellValue();
					long phoneNumber = (long) row.getCell(2).getNumericCellValue();
					String grade = row.getCell(3).getStringCellValue();
					String password = row.getCell(4).getStringCellValue();
					System.out.println(name + ", " + email + ", " + phoneNumber + ", " + grade + ", " + password);
					
					Student student = new Student();
					student.setStudentName(name);
					student.setStudentEmail(email);
					student.setStudentGrade(grade);
					student.setStudentpassword(password);
					student.setStudentPhNo(phoneNumber);
					 repo.save(student);
					
			}
			}
		}
		workbook.close();
		return null;

	}

	@Override
	public ResponseEntity<String> writeToExcel(String filepath) throws IOException {
		
	List<Student> students = repo.findAll();
	XSSFWorkbook workbook = new XSSFWorkbook();
	XSSFSheet sheet = workbook.createSheet();
	Row header = sheet.createRow(0);
	header.createCell(0).setCellValue("studentId");
	header.createCell(1).setCellValue("studentName");
	header.createCell(2).setCellValue("studentEmail");
	header.createCell(3).setCellValue("studentphNo");
	header.createCell(4).setCellValue("studentGrade");
	header.createCell(5).setCellValue("studentPassword");
	int rowNum = 1;
      for(Student student : students)
      {
    	Row row = sheet.createRow(rowNum++);
    	row.createCell(0).setCellValue(student.getStudentId());
    	row.createCell(1).setCellValue(student.getStudentName());
    	row.createCell(2).setCellValue(student.getStudentEmail());
    	row.createCell(3).setCellValue(student.getStudentPhNo());
    	row.createCell(4).setCellValue(student.getStudentGrade());
    	row.createCell(5).setCellValue(student.getStudentpassword());

      }
      FileOutputStream outputStream = new FileOutputStream(filepath);
      workbook.write(outputStream);
      workbook.close();
		return new ResponseEntity<String>("Data transfered to Excel sheet!!",HttpStatus.OK);
	}

	@Override
	public ResponseEntity<String> sendmail(MessageData messageData) {
		SimpleMailMessage message = new SimpleMailMessage();
		message.setTo(messageData.getTo());
		message.setSubject(messageData.getSubject());
		message.setText(messageData.getText()+"\n\nThanks & Regards"+"\n"
		+messageData.getSenderName()+"\n"+messageData.getSenderAddress()
		);
		message.setSentDate(new Date());
		javamailsender.send(message);
		return new ResponseEntity<String>("mail send sucessfully!!",HttpStatus.OK);
	}

	

	@Override
	public ResponseEntity<String> sendMimeMessage(MessageData messageData) throws MessagingException{
		MimeMessage mime = javamailsender.createMimeMessage();
		MimeMessageHelper message = new MimeMessageHelper(mime,false);
		message.setTo(messageData.getTo());
		message.setSubject(messageData.getSubject());
		String emailBody = messageData.getText()
				+"<br><br><h4>Thanks & Regards</h4><br>"
				+"<h4>"+messageData.getSenderName()+"<br>"
				+messageData.getSenderAddress()+"</h4>"
				+"<img src=https://www.qspiders.com/_nuxt/img/qspiders_logo.6096665.png>";
		message.setText(emailBody,true);
		message.setSentDate(new Date());
		javamailsender.send(mime);
		return new ResponseEntity<String>("mime messages send sucessfully!!",HttpStatus.OK);
		
	}

	public ResponseEntity<String> extractFromCsv(MultipartFile file) throws IOException {
		Reader reader = new InputStreamReader(file.getInputStream());
		CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT);
		
		List<CSVRecord> csvRecords = csvParser.getRecords();
	}
	

}










